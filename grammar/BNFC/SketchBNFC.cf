-- Grammar for the Sketch language in BNFC format
-- For more info see https://bnfc.digitalgrammars.com/

Prog . Program ::= [TopDecl] ;

TopPkgDecl  . TopDecl ::= PkgDecl ;
TopInclude  . TopDecl ::= IncludeStmt ;
TopPkgDef   . TopDecl ::= "package" Id ";" ;
TopInlinePkg. TopDecl ::= "package" Id PkgBody ;
TopPragma   . TopDecl ::= PragmaStmt ;

PkgBodyBlock. PkgBody ::= "{" [PkgDecl] "}" ;

PkgFunc  . PkgDecl ::= FunctionDecl ;
PkgField . PkgDecl ::= FieldDecl ";" ;
PkgStruct. PkgDecl ::= StructDecl ;
PkgADT   . PkgDecl ::= ADTDecl ;
PkgAsrt  . PkgDecl ::= SpecialAssertStmt ;

Include. IncludeStmt ::= "include" String ";" ;

Pragma   . PragmaStmt ::= "pragma" Id ";" ;
PragmaArg. PragmaStmt ::= "pragma" Id String ";" ;

Field. FieldDecl ::= VarDecl;

StmtLoop     . Stmt ::= LoopStmt ;
StmtMinRepeat. Stmt ::= MinRepeatStmt ;
StmtFork     . Stmt ::= ForkStmt ;
StmtSPMDFork . Stmt ::= SPMDForkStmt ;
StmtParFor   . Stmt ::= ParForStmt ;
StmtInsert   . Stmt ::= InsertBlock ;
StmtReorder  . Stmt ::= ReorderBlock ;
StmtAtomic   . Stmt ::= AtomicBlock ;
StmtBlock    . Stmt ::= Block ;
StmtFDecl    . Stmt ::= FDeclStmt ;
StmtVarDecl  . Stmt ::= VarDecl ";" ;
StmtExpr     . Stmt ::= ExprStmt ";" ;
StmtBreak    . Stmt ::= "break" ";" ;
StmtCont     . Stmt ::= "continue" ";" ;
StmtSwitch   . Stmt ::= SwitchStmt ;
StmtIfElse   . Stmt ::= IfElseStmt ;
StmtWhile    . Stmt ::= WhileStmt ;
StmtDoWhile  . Stmt ::= DoWhileStmt ";" ;
StmtFor      . Stmt ::= ForStmt ;
StmtAssume   . Stmt ::= AssumeStmt ";" ;
StmtAssert   . Stmt ::= AssertStmt ";" ;
StmtAssertMax. Stmt ::= AssertMaxStmt ";" ;
StmtHAssert  . Stmt ::= HAssertStmt ";" ;
StmtReturn   . Stmt ::= ReturnStmt ";" ;
StmtEmpty    . Stmt ::= ";" ;

FDecl. FDeclStmt ::= FunctionDecl ;

LoopId  . LoopStmt ::= "loop" "(" Id ":" RightExpr ")" PseudoBlock ;
RepeatId. LoopStmt ::= "repeat" "(" Id ":" RightExpr ")" PseudoBlock ;
Loop    . LoopStmt ::= "loop" "(" RightExpr ")" PseudoBlock ;
Repeat  . LoopStmt ::= "repeat" "(" RightExpr ")" PseudoBlock ;

MinRepeat. MinRepeatStmt ::= "minrepeat" PseudoBlock ;

Fork. ForkStmt ::= "fork" "(" VarDecl ";" RightExpr ")" PseudoBlock ;

SPMDFork  . SPMDForkStmt ::= "spmdfork" "(" RightExpr ")" PseudoBlock ;
SPMDForkId. SPMDForkStmt ::= "spmdfork" "(" Id ";" RightExpr ")" PseudoBlock ;

ParFor. ParForStmt ::= "parfor" "(" VarExpr "<-" RangeExp ")" PseudoBlock ;

Range  . RangeExp ::= RightExpr "until" RightExpr ;
RangeBy. RangeExp ::= RightExpr "until" RightExpr "by" RightExpr;

TypeParamsUseId  . TypeParamsUse ::= "<" QualId "<" DataType ">>" ;
TypeParamsUseBare. TypeParamsUse ::= "<" [DataType] ">" ;

QualIdFull  . QualId ::= Id "@" Id ;
QualIdUnQual. QualId ::= Id ;

GlobalDataType. DataType ::= "global" DataTypeMain ;
NormalDataType. DataType ::= DataTypeMain ;
VoidDataType  . DataType ::= "void" ;
DataTypeNoParam  . DataTypeMain ::= DataTypeSpec [DataTypeParamList] ; 
DataTypeWithParam. DataTypeMain ::= DataTypeSpec TypeParamsUse [DataTypeParamList] ;
PlainPrimitiveType. DataTypeSpec ::= PrimitiveType ;
DefinedType       . DataTypeSpec ::= QualId ;
DefinedTypeTmp    . DataTypeSpec ::= "|" QualId "|" ;
DataTypeParamListFull. DataTypeParamList  ::= "[" [DataTypeParm] "]" ;
DataTypeParam       . DataTypeParm ::= ExprNamedParam ;
DataTypeParamBounded. DataTypeParm ::= ExprNamedParam "<:" Number ;

Boolean. PrimitiveType ::= "boolean" ;
Bit    . PrimitiveType ::= "bit" ;
Int    . PrimitiveType ::= "int" ;
Float  . PrimitiveType ::= "float" ;
Double . PrimitiveType ::= "double" ;
Fun    . PrimitiveType ::= "fun" ;
Char   . PrimitiveType ::= "char" ;

VarDeclFull. VarDecl ::= DataType [VarAssign] ;
VarAssignId  . VarAssign ::= Id ;
VarAssignFull. VarAssign ::= Id "=" ExprOrLambda ; 

OptLambda. ExprOrLambda ::= LambdaExpr ;
OptExpr  . ExprOrLambda ::= RightExpr ;

AnnoFull . Anno ::= "@" Id "(" String ")" ;
AnnoEmpty. Anno ::= "@" Id "(" ")" ;

TypeParamsFull. TypeParams ::= "<" [TypeParam] ">" ;
TypeParamId. TypeParam ::= Id ;

FDeclWithBody. FunctionDecl ::= FuncDeclMain Block ;
FDeclOnly    . FunctionDecl ::= FuncDeclMain ";" ;
FDeclMain. FuncDeclMain ::=
    [Anno] [FuncMod] ReturnType Id OptionalTypeParams ParamDeclList FuncImpl FuncFixes ;
Serial   . FuncMod ::= "serial" ;
Harness  . FuncMod ::= "harness" ;
Generator. FuncMod ::= "generator" ;
Stencil  . FuncMod ::= "stencil" ;
Model    . FuncMod ::= "model" ;
TypeParamsEmpty. OptionalTypeParams ::= ;
TypeParamsOpt  . OptionalTypeParams ::= TypeParams ;
FuncImplEmpty. FuncImpl ::= ;
FuncImplFull . FuncImpl ::= "implements" Id ;
FuncFixesEmpty. FuncFixes ::= ;
FuncFixesFull . FuncFixes ::= "fixes" Id ;

ReturnTypeFull. ReturnType ::= DataType ;

PDeclList    . ParamDeclList ::= "(" [ParamDecl] ")" ;
PDeclImplList. ParamDeclList ::= "(" ImplParam [ParamDecl] ")" ;

ImplParamList . ImplParam ::= "[" [ImplParamItem] "]" ;
ImplParamIntId. ImplParamItem ::= "int" Id ;

PDecl   . ParamDecl ::= DataType Id ;
PDeclRef. ParamDecl ::= "ref" DataType Id ;

Blk. Block ::= "{" [Stmt] "}" ;

Insert. InsertBlock ::=  "insert" Block "into" Block ;

Reorder. ReorderBlock ::= "reorder" Block ;

Atomic   . AtomicBlock ::= "atomic" Block ;
AtomicVal. AtomicBlock ::= "atomic" "(" RightExpr ")" Block ;

PseudoBlk. PseudoBlock ::= Stmt ;

Return   . ReturnStmt ::= "return" ;
ReturnVal. ReturnStmt ::= "return" RightExpr ;

AssmSimple. AssumeStmtSimple ::= "assume" RightExpr ;
AssmNoMsg. AssumeStmt ::= AssumeStmtSimple ;
AssmMsg  . AssumeStmt ::= AssumeStmtSimple ":" String ;

AsrtSimple. AssertStmtSimple ::= "assert" RightExpr ; 
SpecialAsrt. SpecialAssertStmt ::=
    SpecialAssertLet "{" SpecialAssertAssume [AssertStmtSimple] "}" ;
SpecialAsrtLet      . SpecialAssertLet ::= "let" ;
SpecialAsrtLetAssign. SpecialAssertLet ::= "let" [VarAssignExpr] ;
VarAssignExprFull. VarAssignExpr ::= Id "=" RightExpr ;
SpecialAsrtAssmEmpty. SpecialAssertAssume ::= ;
SpecialAsrtAssm     . SpecialAssertAssume ::= "assume" RightExpr ;

Asrt   . AssertStmt ::= AssertStmtCore ;
AsrtMsg. AssertStmt ::= AssertStmtCore ":" String ;
AsrtCore  . AssertStmtCore ::= "assert" RightExpr ;
HDAsrtCore. AssertStmtCore ::= "h_assert" RightExpr ;

HAsrt   . HAssertStmt ::= "hassert" RightExpr ;
HAsrtMsg. HAssertStmt ::= "hassert" RightExpr ":" String ;

AsrtMax   . AssertMaxStmt ::= AssertMaxStmtCore ;
AsrtMaxMsg. AssertMaxStmt ::= AssertMaxStmtCore ":" String ;
AsrtMaxCore     . AssertMaxStmtCore ::= "assert_max" RightExpr ;
AsrtMaxCoreRefer. AssertMaxStmtCore ::= "assert_max" "\\" RightExpr ;

Switch. SwitchStmt ::=
    "switch" "(" Id ")" "{" [SwitchStmtCase] SwitchStmtFallThru "}" ;
SwitchCase. SwitchStmtCase ::= "case" Id ":" PseudoBlock ;
SwitchDefaultEmpty. SwitchStmtFallThru ::= ;
SwitchDefault     . SwitchStmtFallThru ::= "default" ":" PseudoBlock ;
SwitchRepeatCase  . SwitchStmtFallThru ::= "repeat_case" ":" PseudoBlock ;

If. IfStmt ::= "if" "(" RightExpr ")" PseudoBlock ;
IfOnly. IfElseStmt ::= IfStmt;
IfElse. IfElseStmt ::= IfStmt "else" PseudoBlock ;

While. WhileStmt ::= "while" "(" RightExpr ")" PseudoBlock ;

DoWhile. DoWhileStmt ::= "do" PseudoBlock "while" "(" RightExpr ")" ;

For. ForStmt ::=
    "for" "(" ForInitStmt ";" ForCondStmt ";" ForIncrStmt ")" PseudoBlock ;
ForCond   . ForCondStmt ::= RightExpr ;
ForCondInf. ForCondStmt ::= ;

ForInitEmpty. ForInitStmt ::= ;
ForInitDecl . ForInitStmt ::= VarDecl ;
ForInitExpr . ForInitStmt ::= ExprStmt;

ForIncrEmpty. ForIncrStmt ::= ;
ForIncr     . ForIncrStmt ::= ExprStmt ;

Expr. ExprStmt ::= AssignExpr ;

Assign            . AssignExpr ::= PrefixExpr AssignOp ExprOrLambda ;
AssignExprNoAssign. AssignExpr ::= PrefixExpr ;
PlainAssignOp . AssignOp ::= "=" ;
PlusAssignOp  . AssignOp ::= "+=" ;
MinusAssignOp . AssignOp ::= "-=" ;
MultiAssignOp . AssignOp ::= "*=" ;
DivideAssignOp. AssignOp ::= "/=" ;
DotAssignOp   . AssignOp ::= ".=" ;

FuncCallFull. FuncCall ::= QualId FuncCallParams ;

ExprGetFull. ExprGet ::= "??" "(" "{" ExprGetParams "}" ")" ;

ExprGetParamsFull. ExprGetParams ::= [ExprNamedParam] ;

FuncCallParamsFull. FuncCallParams ::= "(" [ExprNamedParam] ")" ;

Lambda. LambdaExpr ::= "(" [LambdaParam] ")" "->" RightExpr ;
LambdaParamId. LambdaParam ::= Id ;

ConstrParamsFull. ConstrParams ::= "(" ExprNamedParamMixedSeq ")" ;
ExprNamedParamMixedSeqEmpty. ExprNamedParamMixedSeq ::= ;
ExprNamedParamMixedSeqFirst. ExprNamedParamMixedSeq ::= VarAssignExpr ;
ExprNamedParamMixedSeqCont . ExprNamedParamMixedSeq ::=
    ExprNamedParamMixedSeq "," ExprNamedParam ;

ExprNamedParamAssign. ExprNamedParam ::= Id "=" ExprOrLambda ;
ExprNamedParamSimple. ExprNamedParam ::= ExprOrLambda ;

RightExprNotAgmaxFull. RightExprNotAgmax ::= TernaryExpr ;

Right. RightExpr ::= RightExprNotAgmax ;

ArrInitFull. ArrInit ::= "{" [RightExpr] "}" ;

TernaryExprNone. TernaryExpr ::= LogicOrExpr ;
Ternary. TernaryExpr ::= LogicOrExpr "?" TernaryExpr ":" TernaryExpr ;

LogicOr. LogicOrExpr ::= [LogicAndExpr] ;

LogicAnd. LogicAndExpr ::= [BitwiseOrExpr] ;

BitwiseOr. BitwiseOrExpr ::= [BitWiseXorExpr] ;

BitWiseXor. BitWiseXorExpr ::= [BitWiseAndExpr];

BitWiseAnd. BitWiseAndExpr ::= [EqualExpr] ;

Equal. EqualExpr ::= EqualExprItems ;
EqualExprItemsFirst. EqualExprItems ::= CompareExpr ;
EqualExprItemsCont . EqualExprItems ::= CompareExpr EqualOp EqualExprItems;
PlainEqualOp. EqualOp ::= "==" ;
TriEqualOp  . EqualOp ::= "===" ;
NonEqualOp  . EqualOp ::= "!=" ;

Compare. CompareExpr ::= CompareExprItems ;
CompareExprItemsFirst. CompareExprItems ::= ShiftExpr ;
CompareExprItemsCont . CompareExprItems ::= ShiftExpr CompareOp CompareExprItems;
LTOp. CompareOp ::= "<" ;
LEOp. CompareOp ::= "<=" ;
GTOp. CompareOp ::= ">" ;
GEOp. CompareOp ::= ">=" ;
DotLTOp. CompareOp ::= ".<" ;
DotGTOp. CompareOp ::= ".>" ;
DotLEOp. CompareOp ::= ".<=" ;
DotGEOp. CompareOp ::= ".>=" ;

Shift. ShiftExpr ::= ShiftExprItems ;
ShiftExprItemsFirst. ShiftExprItems ::= AddExpr ;
ShiftExprItemsCont . ShiftExprItems ::= AddExpr ShiftOp ShiftExprItems;
LShiftOp. ShiftOp ::= "<<" ;
RShiftOp. ShiftOp ::= ">>" ;

Add. AddExpr ::= AddExprItems;
AddExprItemsFirst. AddExprItems ::= MultExpr ;
AddExprItemsCont . AddExprItems ::= MultExpr AddOp AddExprItems;
PlusOp    . AddOp ::= "+" ;
MinusOp   . AddOp ::= "-" ;
SelectOp  . AddOp ::= "{|}" ;
DotPlusOp . AddOp ::= ".+" ;
DotMinusOp. AddOp ::= ".-" ;

Mult. MultExpr ::= MultExprItems;
MultExprItemsFirst. MultExprItems ::= PrefixExpr ;
MultExprItemsCont . MultExprItems ::= PrefixExpr MultOp MultExprItems;
PlainMultOp. MultOp ::= "*" ;
DivideOp   . MultOp ::= "/" ;
ModOp      . MultOp ::= "%" ;
DotMultOp  . MultOp ::= ".*" ;
DotDivideOp. MultOp ::= "./" ;
DotModOp   . MultOp ::= ".%" ;

PrefixExprNMOpt. PrefixExpr ::= PrefixExprNoMinus ;
PrefixExprMinus. PrefixExpr ::= "-" PrefixExpr ;

PrefixExprCast. PrefixExprNoMinus ::= CastExpr ;
PrefixExprPost. PrefixExprNoMinus ::= PostfixExpr ;
PrefixExprNM  . PrefixExprNoMinus ::= PrefixOpNM PrefixExpr ;
IncrOp. PrefixOpNM ::= "++" ;
DecrOp. PrefixOpNM ::= "--" ;
NotOp . PrefixOpNM ::= "!" ;
InvtOp. PrefixOpNM ::= "~" ;

Cast. CastExpr ::= "(" DataType ")" PrefixExprNoMinus ;

Postfix. PostfixExpr ::= PrimaryExpr [PostfixIncr] ;
PostIncrOp. PostfixIncr ::= "++" ;
PostDecrOp. PostfixIncr ::= "--" ;

Primary. PrimaryExpr ::= TminicValueExpr [PrimaryPostfix] ;
PrimaryMemberAcc. PrimaryPostfix ::= "." MemberRef ;
PrimaryArrayAcc . PrimaryPostfix ::= "[" ArrayRange "]" ;
MemberRefName. MemberRef ::= Id ;
MemberRefHole. MemberRef ::= "??" ;
MemberRefType. MemberRef ::= "{" DataType "}" ;

TminicNestedExpr. TminicValueExpr ::= "(" RightExpr ")" ;
TminicExprGet   . TminicValueExpr ::= ExprGet ;
TminicFuncCall  . TminicValueExpr ::= FuncCall ;
TminicConstruct . TminicValueExpr ::= ConstructorExpr ;
TminicVar       . TminicValueExpr ::= VarExpr ;
TminicConst     . TminicValueExpr ::= ConstantExpr ;
TminicArrInit   . TminicValueExpr ::= ArrInit ;
TminicRegen     . TminicValueExpr ::= Regen;

-- Regen is parsed differently to the original Sketch parser
-- The original parser does not parse Regen structures and just reads the whole
-- string in as is and processes it later.
-- We handle this similarly by parsing the inners of Regen expressions as token
-- streams and leave it to be processed later.
RegenFull. Regen ::= "{|" [RegenBranch] "|}" ;
RegenBranchFull. RegenBranch ::=  "(" [RegenToken] ")" ;
RegenBranchNoOr. RegenBranch ::=  [RegenTokenNoOr] ;

ConstructorExprNew         . ConstructorExpr ::= "new" QualIdHole ConstrParams ; 
ConstructorExprNewTypeParam. ConstructorExpr ::= "new" QualIdHole TypeParamsUse ConstrParams ;
ConstructorTmp             . ConstructorExpr ::= "|" QualId "|" ConstrParams ;
QualIdHoleFull  . QualIdHole ::= Id "@" IdHole ;
QualIdHoleUnQual. QualIdHole ::= IdHole;
OptId  . IdHole ::= Id ;
OptHole. IdHole ::= "??" ;

Var. VarExpr ::= Id ;

ArrayRangeSimple. ArrayRange ::= [ExprNamedParamNonEmptyList] ;
ArrayRangeEnd   . ArrayRange ::= [ExprNamedParamNonEmptyList] ":" RightExpr ;
ArrayRangeOffset. ArrayRange ::= [ExprNamedParamNonEmptyList] ":" ":" RightExpr ;
ExprNamedParamNonEmptyListFull. ExprNamedParamNonEmptyList ::= ExprNamedParam ;

ConstHex  . ConstantExpr ::= HQuan ;
ConstNum  . ConstantExpr ::= Number ;
ConstChar . ConstantExpr ::= Char ;
ConstStr  . ConstantExpr ::= String ;
ConstTrue . ConstantExpr ::= "true" ;
ConstFalse. ConstantExpr ::= "false" ;
ConstNull . ConstantExpr ::= "null" ;
ConstHole . ConstantExpr ::= "{*}" ;
ConstHole2. ConstantExpr ::= "??" ;
ConstBHole. ConstantExpr ::= BoundedHole; 
ConstAHole. ConstantExpr ::= "**" ;
ConstSHole. ConstantExpr ::= "??s" ;
ConstLVar . ConstantExpr ::= LocalVariable; 
BoundedHoleSimple  . BoundedHole ::= "??" "(" AddExpr ")" ;
BoundedHoleStartEnd. BoundedHole ::= "??" "(" AddExpr "," AddExpr ")" ;

LocalVar. LocalVariable ::= "$" "(" DataType ")" ;

ADT. ADTDecl ::= "adt" Id OptionalTypeParams "{" [ADTBodyItem] "}" ;
NestedADTDecl. ADTBodyItem ::= ADTDecl ;
ADTDeclStruct. ADTBodyItem ::= StructInsideADTDecl ;
ADTParamDecl . ADTBodyItem ::= ParamDecl ";" ;
ADTAnno      . ADTBodyItem ::= Anno ;

StructInsideADT. StructInsideADTDecl ::= Id "{" [StructBodyItem] "}" ;
StructParamDecl. StructBodyItem ::= ParamDecl ";" ;
StructAnno     . StructBodyItem ::= Anno ;

Struct. StructDecl ::=
    [Anno] "struct" Id OptionalTypeParams OptionalExtends "{" [StructBodyItem] "}" ;
OptExtendsEmpty. OptionalExtends ::= ;
OptExtends     . OptionalExtends ::= "extends" Id ;

-- Wildcard category for Regen expressions
-- TODO: Finish wildcard category
RegenTokenOr   . RegenToken ::= "|" ;
RegenTokenOther. RegenToken ::= RegenTokenNoOr ;
NestedRegen. RegenTokenNoOr ::= Regen ;
RegenId    . RegenTokenNoOr ::= Id ;

-- List Defs

terminator TopDecl "" ;
terminator PkgDecl "" ;
separator nonempty VarAssign "," ;
separator nonempty DataType "," ;
terminator DataTypeParamList "" ;
separator DataTypeParm "," ;
terminator Anno "" ;
separator nonempty TypeParam "," ;
terminator FuncMod "" ;
separator ParamDecl "," ;
separator ImplParamItem "," ;
terminator Stmt "" ;
separator nonempty VarAssignExpr "," ;
terminator nonempty AssertStmtSimple ";" ;
terminator SwitchStmtCase "" ;
separator ExprNamedParam "," ;
separator LambdaParam "," ;
separator RightExpr "," ;
separator nonempty LogicAndExpr "||" ;
separator nonempty BitwiseOrExpr "&&" ;
separator nonempty BitWiseXorExpr "|" ;
separator nonempty BitWiseAndExpr "^" ;
separator nonempty EqualExpr "&" ;
terminator PostfixIncr "" ;
terminator PrimaryPostfix "" ;
separator RegenBranch "|" ;
terminator RegenToken "" ;
terminator RegenTokenNoOr "" ;
separator nonempty ExprNamedParamNonEmptyList "," ;
terminator ADTBodyItem "" ;
terminator StructBodyItem "" ;

-- Tokens

-- NOTE: Currently we are using BNFC pre-defined chars and strings literals
-- there may be differences between these and original Sketch lang definitions
-- refer to ANTLR2 grammar for original definitions
token Id (((letter|'_') (letter|digit|'_')*)|
    {"op.+"}| {"op.-"}| {"op.*"}| {"op./"}| {"op.%"}| {"op.="}| {"op.<"}) ;
token Number (digit+ ('.' digit+)? (('e'|'E') ('+'|'-')? digit+)? 'i'? ) ;
token HQuan {"0x"} ( digit | ["abcdefABCDEF"] )+ ;